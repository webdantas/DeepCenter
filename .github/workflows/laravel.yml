name: Laravel CI/CD

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    container:
      image: php:8.2-fpm

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: deepcenter_test
          MYSQL_USER: deepcenter
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: secret
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      run: |
        apt-get update && apt-get install -y \
          git \
          curl \
          libpng-dev \
          libonig-dev \
          libxml2-dev \
          zip \
          unzip \
          nodejs \
          npm
        docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Dependencies
      run: |
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        npm install
        npm run build

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: vendor/bin/phpunit

    - name: Run Laravel Static Analysis
      run: |
        composer require --dev nunomaduro/larastan
        vendor/bin/phpstan analyse

  deploy:
    needs: laravel-tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Build assets
      run: npm run build

    - name: Deploy to production
      run: |
        echo "Deploy to production server would go here"
        # Adicionar comandos de deploy quando tivermos o servidor de produção configurado

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "Deployment successful"
        else
          echo "Deployment failed"
        fi
